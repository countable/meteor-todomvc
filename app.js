// Generated by CoffeeScript 1.3.3
(function() {
  var Todos, filter_selections, filters, make_okcancel_handler, okcancel_events, router, routes;

  Todos = new Meteor.Collection("todos");

  if (Meteor.is_server) {
    Todos.allow({
      'insert': function(uid, doc) {
        return true;
      },
      'update': function(uid, doc) {
        return true;
      },
      'remove': function() {
        return true;
      }
    });
  }

  if (Meteor.is_client) {
    Session.set("filter", "all");
    Session.set("editing_todo", null);
    filter_selections = {
      all: {},
      active: {
        completed: false
      },
      completed: {
        completed: true
      }
    };
    filters = _.keys(filter_selections);
    routes = {};
    _.each(filters, function(filter) {
      return routes["/" + filter] = function() {
        return Session.set("filter", filter);
      };
    });
    router = Router(routes);
    router.init();
    okcancel_events = function(selector) {
      return "keyup " + selector + ", keydown " + selector + ", focusout " + selector;
    };
    make_okcancel_handler = function(options) {
      var cancel, ok;
      ok = options.ok || function() {};
      cancel = options.cancel || function() {};
      return function(evt) {
        var value;
        if (evt.type === "keydown" && evt.which === 27) {
          return cancel.call(this, evt);
        } else if (evt.type === "keyup" && evt.which === 13 || evt.type === "focusout") {
          value = String(evt.target.value || "");
          if (value) {
            return ok.call(this, value, evt);
          } else {
            return cancel.call(this, evt);
          }
        }
      };
    };
    Template.todoapp.todos = function() {
      return Todos.find().count();
    };
    Template.todoapp.events = {};
    Template.todoapp.events[okcancel_events("#new-todo")] = make_okcancel_handler({
      ok: function(title, evt) {
        Todos.insert({
          title: $.trim(title),
          completed: false,
          created_at: new Date().getTime()
        });
        return evt.target.value = "";
      }
    });
    _.extend(Template.main, {
      todos: function() {
        return Todos.find(filter_selections[Session.get("filter")], {
          sort: {
            created_at: 1
          }
        });
      },
      todos_not_completed: function() {
        return Todos.find({
          completed: false
        }).count();
      },
      events: {
        "click input#toggle-all": function(evt) {
          var completed;
          completed = true;
          if (!Todos.find({
            completed: false
          }).count()) {
            completed = false;
          }
          return Todos.find({}).forEach(function(todo) {
            return Todos.update({
              _id: todo._id
            }, {
              $set: {
                completed: completed
              }
            });
          });
        }
      }
    });
    _.extend(Template.todo, {
      todo_completed: function() {
        return this.completed;
      },
      todo_editing: function() {
        return Session.equals("editing_todo", this._id);
      },
      events: {
        "click input.toggle": function() {
          return Todos.update(this._id, {
            $set: {
              completed: !this.completed
            }
          });
        },
        "dblclick label": function() {
          return Session.set("editing_todo", this._id);
        },
        "click button.destroy": function() {
          return Todos.remove(this._id);
        }
      }
    });
    Template.todo.events[okcancel_events("li.editing input.edit")] = make_okcancel_handler({
      ok: function(value) {
        Session.set("editing_todo", null);
        return Todos.update(this._id, {
          $set: {
            title: $.trim(value)
          }
        });
      },
      cancel: function() {
        Session.set("editing_todo", null);
        return Todos.remove(this._id);
      }
    });
    _.extend(Template.footer, {
      todos_completed: function() {
        return Todos.find({
          completed: true
        }).count();
      },
      todos_not_completed: function() {
        return Todos.find({
          completed: false
        }).count();
      },
      todos_one_not_completed: function() {
        return Todos.find({
          completed: false
        }).count() === 1;
      },
      filters: filters,
      filter_selected: function(type) {
        return Session.equals("filter", type);
      },
      events: {
        "click button#clear-completed": function() {
          return Todos.remove({
            completed: true
          });
        }
      }
    });
  }

}).call(this);
